{"version":3,"sources":["Orpheus512.png","components/Home.js","components/Commands.js","components/Meme.js","components/Memelist.js","components/ErrorMsg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","className","src","logo","to","href","id","Component","Commands","Meme","console","log","data","map","row","name","box","imgsrc","Memelist","getMeme","a","memeResult","axios","get","memeList","memes","username","password","ids","contentbox","i","length","push","box_count","request","j","result","method","url","success","resulturl","items","setState","state","this","ErrorMsg","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec8bc9e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Orpheus512.6955f688.png\";","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport logo from '../Orpheus512.png';\nimport './Home.css';\n\nclass Home extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"header\">\n                    <h1>ORPHEUS</h1>\n                    <div className=\"logoContainer\">\n                        <img className=\"logo\" src={logo} />\n                    </div>\n                    <p>Even in Death, I Will Always Be Here for You</p>\n                </div>\n                <div className=\"navigation\">\n                    <Link to=\"/commands\"><button className=\"button-primary\">Command List</button></Link>\n                    <a href=\"https://gg.gg/orpheusbot\"><button className=\"button-primary\">Add to Server</button></a>\n                    <a href=\"https://patreon.com/sorrowinrain\"><button className=\"button-primary\">Support Us</button></a>\n                    <button className=\"button-primary\">Contact Us</button>\n                </div>\n                <div className=\"author\">\n                    <p id=\"authors\">Meet the Makers</p>\n                    <div className=\"authorCard\">\n                        <img className=\"card\" src=\"https://cdn.discordapp.com/avatars/514433421142130698/68e2599934b095f6512e681a99facf29.webp\" />\n                        <div className=\"container\">\n                            <h4><b>hawntozero#5059</b></h4>\n                        </div>\n                    </div>\n                    <div className=\"authorCard\">\n                        <img className=\"card\" src=\"https://cdn.discordapp.com/avatars/218160263361200128/46d58530e383aaa012ac7f79c955d143.webp\" />\n                        <div className=\"container\">\n                            <h4><b>miner46er#3857</b></h4>\n                        </div>\n                    </div>\n                    <div className=\"authorCard\">\n                        <img className=\"card\" src=\"https://cdn.discordapp.com/avatars/307478723563749376/2d2ca86af531f599247de810a5d3ec91.webp\" />\n                        <div className=\"container\">\n                            <h4><b>SorrowInRain#2851</b></h4>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport logo from '../Orpheus512.png';\nimport './Commands.css';\n\nclass Commands extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"header\">\n                    <h1>COMMAND LIST</h1>\n                    <p>Prefix : !</p>\n                </div>\n                <div className=\"buttons\">\n                    <div className=\"navigation\">\n                        <a href=\"#general\"><button className=\"button-primary\">General</button></a>\n                        <a href=\"#music\"><button className=\"button-primary\">Music Player</button></a>\n                        <a href=\"#memes\"><button className=\"button-primary\">Memes</button></a>\n                        <a href=\"#r6s\"><button className=\"button-primary\">Rainbow 6 : Siege</button></a>\n                        <a href=\"#misc\"><button className=\"button-primary\">Misc.</button></a>\n                    </div>\n                    <Link to=\"/\"><button className=\"button-primary\">Back to Homepage</button></Link>\n                </div>\n                <div className=\"content\">\n                    <h3 id=\"general\">General</h3>\n                    <table className=\"commands\">\n                        <tr>\n                            <th>Command</th>\n                            <th>Description</th>\n                            <th>Example</th>\n                        </tr>\n                        <tr>\n                            <td>help</td>\n                            <td>Show list of commands that you can use</td>\n                            <td>!help</td>\n                        </tr>\n                    </table>\n\n                    <h3 id=\"music\">Music Player</h3>\n                    <table className=\"commands\">\n                        <tr>\n                            <th>Command</th>\n                            <th>Description</th>\n                            <th>Example</th>\n                        </tr>\n                        <tr>\n                            <td>play</td>\n                            <td>Input song title and Orpheus will play his lyre to you</td>\n                            <td>!play &lt;Song-Title&gt; <br></br> !play Never Gonna Give You Up</td>\n                        </tr>\n                        <tr>\n                            <td>nowplaying</td>\n                            <td>Show the title of currently played song.</td>\n                            <td>!nowplaying</td>\n                        </tr>\n                        <tr>\n                            <td>queue</td>\n                            <td>Show the queue of the songs right now</td>\n                            <td>!queue</td>\n                        </tr>\n                        <tr>\n                            <td>skip</td>\n                            <td>Skip the currently played song</td>\n                            <td>!skip</td>\n                        </tr>\n                        <tr>\n                            <td>stop</td>\n                            <td>Stop the currently played song and remove all songs from the queue.</td>\n                            <td>!stop</td>\n                        </tr>\n                        <tr>\n                            <td>remove</td>\n                            <td>Remove the song in queue by index that you input.</td>\n                            <td>!remove &lt;Index in Queue&gt; <br></br> !remove 1</td>\n                        </tr>\n                        <tr>\n                            <td>movesong</td>\n                            <td>Move the song in queue from some index to the index that you input.</td>\n                            <td>!movesong &lt;Index in Queue&gt; &lt;Desired Index&gt;<br></br> !movesong 3 1</td>\n                        </tr>\n                        <tr>\n                            <td>setloop</td>\n                            <td>Make your song playlist looping</td>\n                            <td>!setloop &lt;on/off&gt; <br></br> !setloop on</td>\n                        </tr>\n                        <tr>\n                            <td>setshuffle</td>\n                            <td>Make your song playlist shuffling</td>\n                            <td>!setshuffle &lt;on/off&gt; <br></br> !setshuffle on</td>\n                        </tr>\n                        <tr>\n                            <td>lyric</td>\n                            <td>Didn't know the lyric of your song? Just use this command. You don't have to use any parameter if you want to know the lyrics from the currently played song</td>\n                            <td>!lyric [Song-Title]<br></br> !lyric <br></br> !lyric What is Love</td>\n                        </tr>\n                    </table>\n\n                    <h3 id=\"memes\">Memes</h3>\n                    <table className=\"commands\">\n                        <tr>\n                            <th>Command</th>\n                            <th>Description</th>\n                            <th>Example</th>\n                        </tr>\n                        <tr>\n                            <td>meme</td>\n                            <td>Get your meme with using meme ID from meme list, modify by yourself. The amount of texts that you must input is listed on !memelist</td>\n                            <td>!meme &lt;Meme-ID&gt; | &lt;Text1&gt; | &lt;Text2&gt; <br></br> !meme 1 | text1 | text2 | text3 </td>\n                        </tr>\n                        <tr>\n                            <td>memelist</td>\n                            <td>Show the list of meme and the amount of texts that needed. Each page contain 20 memes. For the complete memelist, click <Link to=\"/meme-list\"><b>here</b></Link></td>\n                            <td>!memelist [Page] <br></br> !memelist 2</td>\n                        </tr>\n                    </table>\n\n                    <h3 id=\"r6s\">Rainbow 6 : Siege</h3>\n                    <table className=\"commands\">\n                        <tr>\n                            <th>Command</th>\n                            <th>Description</th>\n                            <th>Example</th>\n                        </tr>\n                        <tr>\n                            <td>strat</td>\n                            <td>Get your Get a random strat for your <s>dumber</s> better experience.</td>\n                            <td>!strat [Attacker/Defender] <br></br> !strat Attacker </td>\n                        </tr>\n                        <tr>\n                            <td>stats</td>\n                            <td>Show your statistics in general. (PC)</td>\n                            <td>!stats &lt;Username&gt; <br></br> !stats miner46er</td>\n                        </tr>\n                        <tr>\n                            <td>opstats</td>\n                            <td>Get your statistics based on your favourite operator. (PC)</td>\n                            <td>!opstats &lt;Username&gt; &lt;Operator&gt;<br></br> !opstats hawntozero Montagne</td>\n                        </tr>\n                        <tr>\n                            <td>opdetail</td>\n                            <td>Give the detail of operator.</td>\n                            <td>!opdetail &lt;Operator&gt;<br></br> !opdetail Thermite</td>\n                        </tr>\n                    </table>\n\n                    <h3 id=\"misc\">Miscellaneous</h3>\n                    <table className=\"commands\">\n                        <tr>\n                            <th>Command</th>\n                            <th>Description</th>\n                            <th>Example</th>\n                        </tr>\n                        <tr>\n                            <td>flip</td>\n                            <td>Flip a coin!</td>\n                            <td>!flip</td>\n                        </tr>\n                        <tr>\n                            <td>roll</td>\n                            <td>Roll a N-side dice</td>\n                            <td>!roll &lt;Sides&gt; <br></br> !roll 20</td>\n                        </tr>\n                        <tr>\n                            <td>trivia</td>\n                            <td>Get random trivia</td>\n                            <td>!trivia</td>\n                        </tr>\n                        <tr>\n                            <td>cat</td>\n                            <td>Get random picture of the cutest (and the most annoying) animal in the world</td>\n                            <td>!cat</td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div className=\"author\">\n                    <p id=\"authors\">Meet the Makers</p>\n                    <div className=\"authorCard\">\n                        <img className=\"card\" src=\"https://cdn.discordapp.com/avatars/514433421142130698/68e2599934b095f6512e681a99facf29.webp\" />\n                        <div className=\"container\">\n                            <h4><b>hawntozero#5059</b></h4>\n                        </div>\n                    </div>\n                    <div className=\"authorCard\">\n                        <img className=\"card\" src=\"https://cdn.discordapp.com/avatars/218160263361200128/46d58530e383aaa012ac7f79c955d143.webp\" />\n                        <div className=\"container\">\n                            <h4><b>miner46er#3857</b></h4>\n                        </div>\n                    </div>\n                    <div className=\"authorCard\">\n                        <img className=\"card\" src=\"https://cdn.discordapp.com/avatars/307478723563749376/2d2ca86af531f599247de810a5d3ec91.webp\" />\n                        <div className=\"container\">\n                            <h4><b>SorrowInRain#2851</b></h4>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Commands;","import React from 'react';\n\nfunction Meme(props){\n    console.log(props);\n    return(\n        <table className=\"memecontent\">\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Meme Name</th>\n                    <th>Text Needed</th>\n                    <th>Example Picture</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    props.data.map(row =>(\n                        <tr>\n                            <td>{row.id}</td>\n                            <td>{row.name}</td>\n                            <td>{row.box}</td>\n                            <td><img src={row.imgsrc} /></td>\n                        </tr>\n                    ))\n                }\n            </tbody>\n        </table>\n    );\n}\n\nexport default Meme;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\n\nimport Meme from './Meme';\nimport './Memelist.css';\n\nclass Memelist extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            items : []\n        }\n    }\n\n    componentDidMount(){\n        this.getMeme();\n    }\n\n    getMeme = async() => {\n        let memeResult = \"\";\n        memeResult = await axios.get('https://api.imgflip.com/get_memes');\n\n        let memeList = \"\";\n        memeList = memeResult.data.data.memes;\n\n        let username = \"SorrowInRain\";\n        let password = \"orpheus-discord\";\n\n        let ids=[];\n        let name=[];\n        let contentbox = [];\n        let memes = [];\n\n        for(var i=0; i<memeList.length; i++){\n            ids.push(memeList[i].id);\n            name.push(memeList[i].name);\n            contentbox.push(memeList[i].box_count);\n        }\n\n        for(var i=0; i<memeList.length;i++){\n            let request = \"\";\n            request += \"?template_id=\" + ids[i] + \"&username=\" + username + \"&password=\" + password;\n            for(var j=0; j<contentbox[i]; j++){\n                request += \"&boxes[\" + j + \"][text]=text\" + (j+1);\n            }\n\n            let result = \"\";\n            result = await axios({\n                method: \"POST\",\n                url : \"https://api.imgflip.com/caption_image\" + request\n            });\n\n            let success = result.data.success;\n            let resulturl = \"\";\n\n            if(success){\n                resulturl = result.data.data.url;\n                memes.push(resulturl);\n            }\n            else{\n                resulturl = \"-\";\n                memes.push(resulturl);\n            }\n        }\n\n        let items = [];\n\n        for(var i = 0; i<memeList.length; i++){\n            items.push({\n                id : i+1,\n                name : name[i],\n                box : contentbox[i],\n                imgsrc : memes[i]\n            });\n        }\n        this.setState({items : items})\n    }\n\n    render(){\n        let {items} = this.state;\n        console.log(items)\n        return(\n            <div>\n                <div className=\"header\">\n                    <h1>MEME LIST</h1>\n                    <p>Powered by : imgflip.com</p>\n                    <p className=\"note\">If the images not loaded, wait for a bit.</p>\n                </div>\n                <div className=\"content\">\n                    <Meme data={items} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Memelist;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction ErrorMsg(){\n    return(\n        <div>\n            <h1>404</h1>\n            <h3>Page Not Found!</h3>\n            <Link to=\"/\">\n                <p>\n                    Back to Home\n                </p>\n            </Link>\n        </div>\n    );\n}\n\nexport default ErrorMsg;","import React from 'react';\nimport{\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport './App.css';\n\nimport Home from './components/Home';\nimport Commands from './components/Commands';\nimport Memelist from './components/Memelist';\nimport ErrorMsg from './components/ErrorMsg';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/commands\" exact component={Commands} />\n          <Route path=\"/meme-list\" exact component={Memelist} />\n          <Route component={ErrorMsg} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}